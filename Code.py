# -*- coding: utf-8 -*-
"""Team8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18IO4GX6znhtLH_6Ll_aWJNMPjRisMA_z

Team 8

by
1. Suryakailash Ramesh
2. Sri Satya Sai Prasanth Siddireddi
"""

import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from math import sqrt
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score
import seaborn as sns
from google.colab import drive
drive.mount('/content/drive')

# Define the URLs of the datasets
df = '/content/drive/My Drive/Data/2022_smd_hourly.xlsx'
df1 = '/content/drive/My Drive/Data/2021_smd_hourly.xlsx'
df2 = '/content/drive/My Drive/Data/2020_smd_hourly.xlsx'

# Read datasets
df_2020 = pd.read_excel(df, sheet_name='NH')
df_2021 = pd.read_excel(df1, sheet_name='NH')
df_2022 = pd.read_excel(df2, sheet_name='NH')

# Concatenate the datasets into one dataframe
df = pd.concat([df_2020, df_2021, df_2022], ignore_index=True, axis=0)
df = df[['Date', 'RT_Demand', 'Hr_End', 'Dry_Bulb', 'Dew_Point']]



# Convert 'Date' to datetime format
df["Date"] = pd.to_datetime(df["Date"])
df["datetime"] = df["Date"] + pd.to_timedelta(df["Hr_End"], unit="h")
df = df.set_index("datetime")
df['Dry_Bulb_sq'] = df['Dry_Bulb']**2
df['Dew_Point_sq'] = df['Dew_Point']**2
df['interaction'] = df['Dry_Bulb'] * df['Dew_Point']
df['day_of_week'] = df.index.dayofweek
df['month'] = df.index.month
df['is_weekend'] = df['day_of_week'].apply(lambda x: 1 if x >= 5 else 0)



# Train-Test Split
train_data = df[df.index < '2023-01-01']
test_data_start_date = '2022-12-28'
test_data = df[df.index >= test_data_start_date]

X_train, y_train = train_data[['Dry_Bulb', 'Dew_Point', 'Dry_Bulb_sq', 'Dew_Point_sq', 'interaction', 'day_of_week', 'Hr_End','month','is_weekend']], train_data['RT_Demand']

corr = train_data.corr()

# Create a heatmap
plt.figure(figsize=(10,8))
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

#RT_Demand Variable Visualization
grouped = train_data.groupby(train_data.index.year)
plt.figure()
for name, group in grouped:
    plt.subplot()
    group['RT_Demand'].plot()
    plt.title(name)
plt.show()

# Dry_Bulb Variable Visualization
plt.figure()
train_data['Dry_Bulb'].plot()
plt.title('Dry_Bulb Variable Visualization')
plt.xlabel('Time')
plt.ylabel('Dry_Bulb')
plt.show()

# Create a pairplot
sns.pairplot(train_data)
plt.show()

plt.scatter(train_data['Dry_Bulb'], train_data['Dew_Point'])
plt.scatter(test_data['Dry_Bulb'], test_data['Dew_Point'], c='red')
# Set the title and labels
plt.title('Dry_Bulb vs Dew_Point')
plt.xlabel('Dry_Bulb')
plt.ylabel('Dew_Point')

# Show the plot
plt.show()

# Define features and target for train and test data
X_train, y_train = train_data[['Dry_Bulb', 'Dew_Point', 'Dry_Bulb_sq', 'Dew_Point_sq', 'interaction', 'day_of_week', 'Hr_End']], train_data['RT_Demand']
X_test, y_test = test_data[['Dry_Bulb', 'Dew_Point', 'Dry_Bulb_sq', 'Dew_Point_sq', 'interaction', 'day_of_week', 'Hr_End']], test_data['RT_Demand']

sns.pairplot(df[['Dry_Bulb', 'Dew_Point', 'Dry_Bulb_sq', 'Dew_Point_sq', 'interaction', 'day_of_week', 'Hr_End','RT_Demand']])
plt.show()

# Random Forest
model_rf = RandomForestRegressor(n_estimators=3000, random_state=42, max_depth=25)
model_rf.fit(X_train, y_train)
y_pred_rf = model_rf.predict(X_test)


# Linear Regression
model_lr = LinearRegression()
model_lr.fit(X_train, y_train)
y_pred_lr = model_lr.predict(X_test)

# Evaluate Random Forest
mae_rf = mean_absolute_error(y_test, y_pred_rf)
mse_rf = mean_squared_error(y_test, y_pred_rf)
rmse_rf = sqrt(mse_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print("Random Forest Metrics:")
print(f"Mean Absolute Error (MAE): {mae_rf}")
print(f"Mean Squared Error (MSE): {mse_rf}")
print(f"Root Mean Squared Error (RMSE): {rmse_rf}")
print(f"R-squared: {r2_rf}")

# Evaluate Linear Regression
mae_lr = mean_absolute_error(y_test, y_pred_lr)
mse_lr = mean_squared_error(y_test, y_pred_lr)
rmse_lr = sqrt(mse_lr)
r2_lr = r2_score(y_test, y_pred_lr)

print("\nLinear Regression Metrics:")
print(f"Mean Absolute Error (MAE): {mae_lr}")
print(f"Mean Squared Error (MSE): {mse_lr}")
print(f"Root Mean Squared Error (RMSE): {rmse_lr}")
print(f"R-squared: {r2_lr}")

# Plot the actual vs. predicted values for Random Forest
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(y_test, label='Actual')
plt.plot(test_data.index, y_pred_rf, label='Random Forest Forecast', linestyle='dashed')
plt.title('RT_Demand Forecast for Dec 2023 (Random Forest)')
plt.xlabel('Time')
plt.ylabel('RT_Demand')
plt.legend()

# Plot the actual vs. predicted values for Linear Regression
plt.subplot(1, 2, 2)
plt.plot(y_test, label='Actual')
plt.plot(test_data.index, y_pred_lr, label='Linear Regression Forecast', linestyle='dashed', color='orange')
plt.title('RT_Demand Forecast for Dec 2023 (Linear Regression)')
plt.xlabel('Time')
plt.ylabel('RT_Demand')
plt.legend()

plt.tight_layout()
plt.show()